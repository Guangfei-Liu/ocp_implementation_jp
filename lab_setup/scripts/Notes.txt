The system requirements vary per host type:
Masters
Physical or virtual system
Base OS: Red Hat Enterprise Linux (RHEL) 7.1 with "Minimal" installation option
2 vCPU
Minimum 8 GB RAM
Minimum 30 GB hard disk space
Nodes
Physical or virtual system, or an instance running on a public IaaS
Base OS: Red Hat Enterprise Linux (RHEL) 7.1 with "Minimal" installation option
Docker 1.6 or later
1 vCPU
Minimum 8 GB RAM
Minimum 15 GB hard disk space

* Our Components

1. Configure DNS Server on oseadmin
2. set up repositories
3. Disable NetworkManager 
yum remove NetworkManager*
4. Install tools
yum install wget git net-tools bind-utils iptables-services
bridge-utils
5. Update the system to the latest packages:
yum update -y 
6. Install Docker version 1.6 or later from the rhel-7-server-ose-3.0-rpms repository must be installed and
running on master and node hosts before installing OpenShift.

yum install docker


7. e dit the /etc/sysconfig/docker file and add --insecure-registry 172.30.0.0/16 to
the OPTIONS parameter. For example:
OPTIONS=--selinux-enabled --insecure-registry 172.30.0.0/16
The --insecure-registry option instructs the Docker daemon to trust any Docker
registry on the 172.30.0.0/16 subnet, rather than requiring a certificate.


Note
After installing OpenShift, you can choose to secure the integrated Docker registry, which
involves adjusting the --insecure-registry option accordingly.


8. Configuring Docker Storage
Docker’s default loopback storage mechanism is not supported for production use and is only
appropriate for proof of concept environments. For production environments, you must create a thin-
pool logical volume and re-configure docker to use that volume.
You can use the docker-storage-setup script to create a thin-pool device and configure docker’s
storage driver after installing docker but before you start using it. The script reads configuration
options from the /etc/sysconfig/docker-storage-setup file.


Configure docker-storage-setup for your environment. There are three options available
based on your storage configuration:
a. Create a thin-pool volume from the remaining free space in the volume group where
your root filesystem resides; this requires no configuration:
# docker-storage-setup
b. Use an existing volume group, in this example docker-vg, to create a thin-pool:
# echo <<EOF > /etc/sysconfig/docker-storage-setup
VG=docker-vg
SETUP_LVM_THIN_POOL=yes
EOF
# docker-storage-setup


Verify your configuration. You should have dm.thinpooldev value in the
/etc/sysconfig/docker-storage file and a docker-pool device:

# lvs
LV
VG
Attr
LSize Pool Origin
Data% Meta% Move Log Cpy%Sync Convert
docker-pool
docker-vg twi-a-tz-- 48.95g
0.00
0.44
# cat /etc/sysconfig/docker-storage
DOCKER_STORAGE_OPTIONS=--storage-opt dm.fs=xfs --storage-opt
dm.thinpooldev=/dev/mapper/docker--vg-docker--pool


* Re-initialize docker.
# systemctl stop docker
# rm -rf /var/lib/docker/*
# systemctl restart docker

Ensuring Installer Access to Hosts
Ansible, which is used to run the installation process, requires a user that has access to all hosts.
For running the installer as a non-root user, passwordless sudo rights must also be configured on
each destination host.
For example, you can generate an SSH key on the host where you will invoke the installation
process:
# ssh-keygen

copy all the ssh keys to the other hosts

=== 1.3. QUICK INSTALLATION




1.3.1. Overview
The quick installation method allows you to use an interactive CLI utility to install OpenShift across a
set of hosts. The installation utility is provided to make the trial installation experience easier by
interactively gathering the data to run deployments. The utility is a Python wrapper around the
Ansible-based installation process, available at https://install.openshift.com.
8CHAPTER 1. INSTALLATION
Alternatively, you can use the advanced installation method to manually configure and run the
Ansible playbooks.


1.3.2. Prerequisites
The installation utility allows you to install OpenShift master and node hosts. By default, any hosts
you designate as masters during the installation process will also be configured as nodes that are
marked xref:../../admin_guide/manage_nodes.adoc#marking-nodes-as-unschedulable-or-
schedulable[unschedulable]. This is so the masters are configured as part of the OpenShift SDN.
Before installing OpenShift, you must first satisfy the prerequisites on your hosts, which includes
verifying system and environment requirements and properly installing and configuring Docker. After
following the instructions in the Prerequisites topic, you can continue to installing OpenShift.






Method 2: Downloading and Running the Installation Utility
1. Download and unpack the installation utility on a host that has SSH access to your intended
master and node hosts:
$ curl -o oo-install-ose.tgz \
https://install.openshift.com/portable/oo-install-ose.tgz
$ tar -zxf oo-install-ose.tgz
2. Execute the installation utility to interactively configure one or more hosts:
$ ./oo-install-ose
3. Follow the on-screen instructions to install a new OpenShift instance.



get
7.
oc delete all -l docker-registry=default ; oc delete pod docker-registry-1-deploy


docker pull registry.access.redhat.com/openshift3/ose-docker-registry:v3.0.0.0
oadm registry --config=admin.kubeconfig   --credentials=openshift-registry.kubeconfig  --s='openshift3/ose-${component}:v3.0.0.0' --selector='zone=infranodes'
oadm registry --config=/etc/openshift/master/admin.kubeconfig   --credentials=/etc/openshift/master/openshift-registry.kubeconfig  --images='registry.access.redhat.com/openshift3/ose-${component}:v3.0.0.0' --selector='region=infra' 

 curl -v `oc get services | grep registry | awk '{print $4":"$5}/v2/' | sed 's,/[^/]\+$,/v2/,'`


oc delete all -l router=trainingrouter


    
oadm router trainingrouter --stats-password='r3dh@t1!' --replicas=1     --credentials='/etc/openshift/master/openshift-router.kubeconfig'     --images='registry.access.redhat.com/openshift3/ose-${component}:${version}'  --selector='region=infra'

oc exec -it -p $(oc get pods | grep router | awk '{print $1}' | head -n 1) /bin/bash
cat /var/lib/containers/router/routes.json



iptables -I OS_FIREWALL_ALLOW -p tcp -m tcp --dport 1936 -j ACCEPT


trainingrouter
Mlk9eBqAoy


docker pull registry.access.redhat.com/openshift3/ruby-20-rhel7





{
    "kind": "Route",
    "apiVersion": "v1",
    "metadata": {
        "name": "test-route"
    },
    "spec": {
        "host": "test1.cloudapps-635b.oslab.opentlc.com",
        "to": {
            "kind": "Service",
            "name": "simple-openshift-sinatra"
        }
    },
    "status": {}
}







[root@master00-f4fc ~]# curl -E /etc/openshift/master/master.etcd-client.crt --cacert /etc/openshift/master/ca.crt --key /etc/openshift/master/master.etcd-client.key https://`hostname -f`:4001/v2/keys/openshift.io/registry/sdnsubnets | python -mjson.tool
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1845  100  1845    0     0   5508      0 --:--:-- --:--:-- --:--:--  5523
{
    "action": "get",
    "node": {
        "createdIndex": 287,
        "dir": true,
        "key": "/openshift.io/registry/sdnsubnets",
        "modifiedIndex": 287,
        "nodes": [
            {
                "createdIndex": 289,
                "key": "/openshift.io/registry/sdnsubnets/node01-f4fc.oslab.opentlc.com",
                "modifiedIndex": 289,
                "value": "{\"kind\":\"HostSubnet\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"node01-f4fc.oslab.opentlc.com\",\"uid\":\"414cc048-2081-11e5-bc86-2cc260072896\",\"creationTimestamp\":\"2015-07-02T06:12:02Z\"},\"host\":\"node01-f4fc.oslab.opentlc.com\",\"hostIP\":\"192.168.0.201\",\"subnet\":\"10.1.1.0/24\"}"
            },
            {
                "createdIndex": 296,
                "key": "/openshift.io/registry/sdnsubnets/infranode00-f4fc.oslab.opentlc.com",
                "modifiedIndex": 296,
                "value": "{\"kind\":\"HostSubnet\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"infranode00-f4fc.oslab.opentlc.com\",\"uid\":\"42b33822-2081-11e5-bc86-2cc260072896\",\"creationTimestamp\":\"2015-07-02T06:12:04Z\"},\"host\":\"infranode00-f4fc.oslab.opentlc.com\",\"hostIP\":\"192.168.0.101\",\"subnet\":\"10.1.3.0/24\"}"
            },
            {
                "createdIndex": 292,
                "key": "/openshift.io/registry/sdnsubnets/master00-f4fc.oslab.opentlc.com",
                "modifiedIndex": 292,
                "value": "{\"kind\":\"HostSubnet\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"master00-f4fc.oslab.opentlc.com\",\"uid\":\"4188bd9c-2081-11e5-bc86-2cc260072896\",\"creationTimestamp\":\"2015-07-02T06:12:02Z\"},\"host\":\"master00-f4fc.oslab.opentlc.com\",\"hostIP\":\"192.168.0.100\",\"subnet\":\"10.1.2.0/24\"}"
            },
            {
                "createdIndex": 287,
                "key": "/openshift.io/registry/sdnsubnets/node00-f4fc.oslab.opentlc.com",
                "modifiedIndex": 287,
                "value": "{\"kind\":\"HostSubnet\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"node00-f4fc.oslab.opentlc.com\",\"uid\":\"414990ac-2081-11e5-bc86-2cc260072896\",\"creationTimestamp\":\"2015-07-02T06:12:02Z\"},\"host\":\"node00-f4fc.oslab.opentlc.com\",\"hostIP\":\"192.168.0.200\",\"subnet\":\"10.1.0.0/24\"}"
            }
        ]
    }
}







Disabling Self-provisioning

Deleting the self-provisioners cluster role binding will deny permissions for self-provisioning any new projects.
 When disabling self-provisioning, 
 set the projectRequestMessage parameter in the master-config.yaml file instructing developers on how to request a new project. 
 This parameter is a string that will be presented to the developer in the web console and command line when they attempt to self-provision a project. For example:

Contact your system administrator at projectname@example.com to request a project.







